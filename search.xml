<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hwcloud上的Oracle-RAC-12cR2安装手册(3)--oracle软件的安装]]></title>
    <url>%2F2017%2F11%2F29%2Fhwcloud%E4%B8%8A%E7%9A%84Oracle-RAC-12cR2%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C-3-oracle%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[Centos6安装ASMLIB]]></title>
    <url>%2F2017%2F11%2F27%2Fabc%2F</url>
    <content type="text"><![CDATA[Centos6安装ASMLIB我这里操作系统用的是Centos 6.8，Centos 6系列和Redhat 6系列都可以按下面的方式安装，至于其他版本的下载连接，参考地址：http://www.oracle.com/technetwork/server-storage/linux/asmlib/index-101839.html?ssSourceSiteId=ocomen 注：以下操作需要在node01和node02两个节点上操作 下载相关软件12[root@node01 ~]# wget http://oss.oracle.com/projects/oracleasm-support/dist/files/RPMS/rhel6/amd64/2.1.8/oracleasm-support-2.1.8-1.el6.x86_64.rpm[root@node01 ~]# wget http://download.oracle.com/otn_software/asmlib/oracleasmlib-2.0.4-1.el6.x86_64.rpm 使用yum自动安装相关依赖1[root@node01 ~]# yum install oracleasm 使用yum本地安装下载好的两个安装包12[root@node01 ~]# yum localinstall oracleasmlib-2.0.4-1.el6.x86_64.rpm[root@node01 ~]# yum localinstall oracleasm-support-2.1.8-1.el6.x86_64.rpm 配置oracleasm服务123456789101112[root@node01 ~]# oracleasm configure -iConfiguring the Oracle ASM library driver.This will configure the on-boot properties of the Oracle ASM librarydriver. The following questions will determine whether the driver isloaded on boot and what permissions it will have. The current valueswill be shown in brackets ('[]'). Hitting &lt;ENTER&gt; without typing ananswer will keep that current value. Ctrl-C will abort.Default user to own the driver interface []: gridDefault group to own the driver interface []: asmadminStart Oracle ASM library driver on boot (y/n) [n]: yScan for Oracle ASM disks on boot (y/n) [y]: yWriting Oracle ASM library driver configuration: done 启动oracleasm1[root@node01 ~]# /etc/init.d/oracleasm enable]]></content>
      <categories>
        <category>oracle</category>
        <category>ASM</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>ASM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos6.8调整swap空间]]></title>
    <url>%2F2017%2F11%2F27%2Fcentos6-8%E8%B0%83%E6%95%B4swap%E7%A9%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[起因安装数据库时，要求swap空间至少为8G大小，由于操作系统已经安装完成，因此需要用如下方式调整swap空间 创建的swap文件这里启用的swap会与默认的swap空间叠加使用，默认的是4G大小，因此这里只需要再创建4Gswap即可 123fallocate -l 4g /var/swapfilechmod 600 /var/swapfile mkswap /var/swapfile 启用创建的swap文件1swapon /var/swapfile 添加至fstab文件编辑/etc/fstab文件，添加如下内容 1/var/swapfile swap swap defaults 0 0]]></content>
      <categories>
        <category>LINUX</category>
        <category>swap</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>swap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hwcloud上的Oracle RAC 12cR2安装手册(2)--grid的安装]]></title>
    <url>%2F2017%2F11%2F27%2Fhwcloud%E4%B8%8A%E7%9A%84Oracle-RAC-12cR2%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C-2-grid%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装CVUnode01上，root用户 执行如下命令： 12cd /u01/app/12.2.0/grid/cv/rpm/rpm -ivh cvuqdisk-1.0.10-1.rpm node01上，grid用户 执行如下命令： 12cd /u01/app/12.2.0/grid/./runcluvfy.sh stage -pre crsinst -n node01,node02 -fixup -verbose 返回结果如下，则表示配置正确 12345Pre-check for cluster services setup was successful.CVU operation performed: stage -pre crsinstDate: Nov 27, 2017 6:26:58 PMCVU home: /u01/app/12.2.0/grid/User: grid 如果有报错，则按照提示修复错误即可 安装网格基础设施(grid)注： 安装前需保证node02上ORACLE_BASE和ORACLE_HOME目录为空，如果报错，可以手动清理掉 安装前保证node01上的ORACLE_BASE的目录为空，如果报错，可以手动清理掉 node01上，grid用户 12cd /u01/app/12.2.0/grid/./gridSetup.sh 安装完成后，点击close关闭即可。 验证使用grid用户分别在node01和node02上执行crs_stat -v -t查看服务运行状态，如下： 创建其他磁盘组node01上，grid用户 执行asmca，结果如下： 至此，完成Grid安装 接着看hwcloud上的Oracle RAC 12cR2安装手册(3)—oracle软件的安装]]></content>
      <categories>
        <category>oracle</category>
        <category>rac</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>rac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos6修改Hostname]]></title>
    <url>%2F2017%2F11%2F24%2FCentos6%E4%BF%AE%E6%94%B9Hostname%2F</url>
    <content type="text"><![CDATA[查看当前hostname12[root@node01 ~]# hostnamenode01.myCluster.com 临时修改hostname命令格式为： hostname newhostname 如下： 123[root@node01 ~]# hostname node02.myCluster.com[root@node01 ~]# hostnamenode02.myCluster.com 通过以上修改，只能临时生效，重启服务器后失效 修改/etc/sysconfig/network通过修改/etc/sysconfig/network中的hostname，实现永久生效 12NETWORKING=yesHOSTNAME=node02.myCluster.com]]></content>
      <categories>
        <category>LINUX</category>
        <category>hostname</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>hostname</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hwcloud上的Oracle RAC 12cR2安装手册(1)--环境的准备]]></title>
    <url>%2F2017%2F11%2F23%2Fhwcloud%E4%B8%8A%E7%9A%84Oracle-RAC-12cR2%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C-1-%E7%8E%AF%E5%A2%83%E7%9A%84%E5%87%86%E5%A4%87%2F</url>
    <content type="text"><![CDATA[网络网卡分配 网卡名 作用 网段 eth0 Public IP 192.168.1.0/24 eth1 NET IP 192.168.2.0/24 eth2 Private IP 192.168.6.0/24 这里我用了三块网卡： eth0做Public IP的网卡，同时会绑定Virtual IP 和 SCAN IP eth1做NET IP的网卡，用来提供访问互联网的服务 eth2做Private的网卡，用来做节点之间的数据交互 注：在华为云控制台关闭node01节点和node02节点的Public IP网卡的源/目的检查，否则虚拟ip是不通的 IP段分配 Name node01 node02 Public IP 192.168.1.14 192.168.1.15 Private IP 192.168.6.2 192.168.6.3 Virtual IP 192.168.1.16 192.168.1.17 SCAN IP 192.168.1.18 192.168.1.19 192.168.1.20 NET IP 192.168.2.95 192.168.2.96 安全组修改华为云安全组，放行169.254.0.0/16 网段 修改主机名参考Centos6修改Hostname 分别将两个节点的主机名改为node01.myCluster.com、node02.myCluster.com 配置host解析修改node1和node2的hosts文件，添加如下内容 12345678910111213# Public192.168.1.14 node01.myCluster.com node01192.168.1.14 node02.myCluster.com node02# Private192.168.6.2 node01-priv.myCluster.com node01-priv192.168.6.3 node02-priv.myCluster.com node02-priv# Virtual192.168.1.16 node01-vip.myCluster.com node01-vip192.168.1.17 node02-vip.myCluster.com node02-vip# SCAN192.168.1.18 nodes-scan.myCluster.com nodes-scan192.168.1.19 nodes-scan.myCluster.com nodes-scan192.168.1.20 nodes-scan.myCluster.com nodes-scan 关闭libvirt的虚拟网卡功能如果服务器安装了libvirt，则需要关闭其自带的虚拟网卡功能，方法如下： 1234virsh net-listvirsh net-destroy defaultvirsh net-undefine defaultservice libvirtd restart (注：华为云提供的Centos6.8镜像不需要做此操作) 禁用ZEROCONF分别编辑node01和node02上的/etc/sysconfig/network，添加如下内容 1NOZEROCONF=yes 操作系统配置安装依赖1yum -y install binutils compat-libcap1 compat-libstdc++ compat-libstdc++-33 e2fsprogs e2fsprogs-libs glibc glibc glibc-devel glibc-devel ksh libgcc libgcc libstdc++ libstdc++ libstdc++-devel libstdc++-devel libaio libaio libaio-devel libaio-devel libXtst libXtst libX11 libX11 libXau libXau libxcb libxcb libXi libXi make net-tools nfs-utils sysstat smartmontools gcc gcc-c++ gcc-devel 配置swaporacle要求swap空间至少为8G，我用的这个镜像默认swap为4G，因此需要调整，参考centos6.8调整swap空间 调整即可 配置内核参数我服务器配置为4C/8G 在node01和node02上编辑/etc/sysctl.conf，添加或修改如下内容 123456789101112kernel.shmall = 4294967296kernel.shmmax = 8589934591fs.aio-max-nr = 1048576fs.file-max = 6815744kernel.shmmni = 4096kernel.sem = 250 32000 100 128net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576kernel.panic_on_oops=1 关于以上部分参数的介绍： kernel.shmmax: 用来定义共享内存单个共享内存段可使用的内存大小，最好设置改值得大小能容下整个SGA的大小，否则会导致性能下降，原因是因为在实例启动以及ServerProcess创建的时候，多个小的共享内存段可能会导致当时轻微的系统性能的降低(在启动的时候需要去创建多个虚拟地址段，在进程创建的时候要让进程对多个段进行“识别”，会有一些影响)，但是其他时候都不会有影响。 以上未经过验证 基于以上的说法，在设置改参数的时候需要考虑SGA的大小。在我的数据库中，一般设置MEMORY_TARGET为物理内存80%，SGA又占MEMORY_TARGET的80%，因此可将kernel.shmmax设置为物理内存的64%，一般情况下大于SGA即可，这里为了方便计算，我设置为物理-1byte，既8589934591byte kernel.shmall: 该参数控制可以使用的共享内存的总页数。Linux共享内存页大小为4KB,共享内存段的大小都是共享内存页大小的整数倍。一个共享内存段的最大大小是16G，那么需要共享内存页数是16GB/4KB=16777216KB /4KB=4194304（页），也就是64Bit系统下16GB物理内存，设置kernel.shmall = 4194304才符合要求(几乎是原来设置2097152的两倍)。这时可以将shmmax参数调整到16G了，同时可以修改SGA_MAX_SIZE和SGA_TARGET为12G（您想设置的SGA最大大小，当然也可以是2G~14G等，还要协调PGA参数及OS等其他内存使用，不能设置太满，比如16G） 以上的说法来自于网络，这里贴出来仅供参考 其实，该参数是用来控制可用的共享内存数的，单位是page(通常在linux中1page=4KB)，只要可用的共享内存书大于SGA的大小即可，一般默认的大小就可以满足大部分oracle的需求了，这里我没有修改默认值 kernel.shmmni： 该参数是共享内存段的最大数量。shmmni缺省值4096，一般肯定是够用了。 fs.file-max： 该参数决定了系统中所允许的文件句柄最大数目，文件句柄设置代表linux系统中可以打开的文件的数量。 fs.aio-max-nr： 此参数限制并发未完成的请求，应该设置避免I/O子系统故障。 kernel.sem： 以kernel.sem = 250 32000 100 128为例： ​ 250是参数semmsl的值，表示一个信号量集合中能够包含的信号量最大数目。 ​ 32000是参数semmns的值，表示系统内可允许的信号量最大数目。 ​ 100是参数semopm的值，表示单个semopm()调用在一个信号量集合上可以执行的操作数量。 ​ 128是参数semmni的值，表示系统信号量集合总数。 net.ipv4.ip_local_port_range： 表示应用程序可使用的IPv4端口范围。 net.core.rmem_default： 表示套接字接收缓冲区大小的缺省值。 net.core.rmem_max： 表示套接字接收缓冲区大小的最大值。 net.core.wmem_default： 表示套接字发送缓冲区大小的缺省值。 net.core.wmem_max： 表示套接字发送缓冲区大小的最大值。 执行sysctl -p使其生效 关闭NTPOracle Rac有自带的Oracle Cluster Time Synchronization Service来保证节点间的时间同步，因此，关闭自带的NTP服务 命令如下： 1234/sbin/service ntpd stopchkconfig ntpd offmv /etc/ntp.conf /etc/ntp.conf.orgrm /var/run/ntpd.pid 配置PAM在node01和node02节点上编辑/etc/pam.d/login，添加如下内容： 1session required pam_limits.so limit文件在node01和node02节点上编辑/etc/security/limits.conf，添加如下内容： 12345678@oinstall hard nofile 65536@oinstall soft nofile 10240@oinstall hard nproc 16384@oinstall soft nproc 16384@oinstall hard stack 32768@oinstall soft stack 10240@oinstall soft memlock 475188563@oinstall hard memlock 475188563 关闭SELinux在node01和node02上分别执行 1setenforce 0 在node01和node02节点上编辑文件/etc/sysconfig/selinux，修改如下内容： 1SELINUX=disabled 创建用户、组、文件夹在node01和node02上分别执行如下命令： 123456789101112131415groupadd -g 1000 oinstallgroupadd -g 1020 asmadmingroupadd -g 1021 asmdbagroupadd -g 1022 asmopergroupadd -g 1031 dbagroupadd -g 1032 operuseradd -u 1100 -g oinstall -G asmadmin,asmdba,asmoper,oper,dba griduseradd -u 1101 -g oinstall -G dba,asmdba,oper oraclemkdir -p /u01/softwaremkdir -p /u01/app/12.2.0/gridmkdir -p /u01/app/gridmkdir -p /u01/app/oraclechown -R grid:oinstall /u01chown oracle:oinstall /u01/app/oraclechmod -R 775 /u01/ 将下面的两个文件分别上传至node01的/u01/software文件夹下 linuxx64_12201_grid_home.zip linuxx64_12201_database.zip 解压并修改对应权限 12345cd /u01/softwareunzip linuxx64_12201_grid_home.zip -d /u01/app/12.2.0/grid/chown -R grid:oinstall /u01/app/12.2.0/grid/unzip linuxx64_12201_database.zipchown oracle:oinstall database 配置环境变量配置grid用户的环境变量在node01上，grid用户 编辑/home/grid/.bash_profile，添加如下内容： 12345678export ORACLE_SID=+ASM1export TMP=/tmpexport ORACLE_BASE=/u01/app/gridexport ORACLE_HOME=/u01/app/12.2.0/gridexport PATH=$ORACLE_HOME/bin:/usr/sbin:$PATHexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlibexport LC_ALL=en_US.UTF-8 在node02上，grid用户 编辑/home/grid/.bash_profile，添加如下内容： 12345678export ORACLE_SID=+ASM2export TMP=/tmpexport ORACLE_BASE=/u01/app/gridexport ORACLE_HOME=/u01/app/12.2.0/gridexport PATH=$ORACLE_HOME/bin:/usr/sbin:$PATHexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlibexport LC_ALL=en_US.UTF-8 配置oracle的环境变量在node01上，oracle用户 编辑/home/oracle/.bash_profile，添加如下内容： 123456789export TMP=/tmpexport ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/product/12.2.0/dbhome_1export ORACLE_SID=orcl_1export PATH=$ORACLE_HOME/bin:/usr/sbin:$ORACLE_HOME/OPatch:$PATHexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlibexport NLS_LANG=AMERICAN_AMERICA.UTF8export LC_ALL=en_US.UTF-8 在node02上，oracle用户 编辑/home/oracle/.bash_profile，添加如下内容： 123456789export TMP=/tmpexport ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/product/12.2.0/dbhome_1export ORACLE_SID=orcl_2export PATH=$ORACLE_HOME/bin:/usr/sbin:$ORACLE_HOME/OPatch:$PATHexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/libexport CLASSPATH=$ORACLE_HOME/JRE:$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlibexport NLS_LANG=AMERICAN_AMERICA.UTF8export LC_ALL=en_US.UTF-8 配置SSH互信在node01上，grid用户，分别为grid用户和oracle用户配置SSH互信。 注：配置过程中需要输入grid和oracle用户的密码，请提前设置好 123cd /u01/app/12.2.0/grid/oui/prov/resources/scripts/./sshUserSetup.sh -hosts &quot;node01 node02&quot; -user grid -advanced -noPromptPassphrase./sshUserSetup.sh -hosts &quot;node01 node02&quot; -user oracle -advanced -noPromptPassphrase 在node01上，grid用户，尝试登录node02验证 1234[grid@node01 ~]$ ssh node02 hostnamenode02.myCluster.com[grid@node01 ~]$ ssh node02-priv hostnamenode02.myCluster.com 在node02上，grid用户，尝试登录node01验证 1234[grid@node02 ~]$ ssh node01 hostnamenode01.myCluster.com[grid@node02 ~]$ ssh node01-priv hostnamenode01.myCluster.com 在node01上，oracle用户，尝试登录node02验证 1234[oracle@node01 ~]$ ssh node02 hostnamenode02.myCluster.com[oracle@node01 ~]$ ssh node02-priv hostnamenode02.myCluster.com 在node02上，oracle用户，尝试登录node01验证 1234[oracle@node02 ~]$ ssh node01 hostnamenode01.myCluster.com[oracle@node02 ~]$ ssh node01-priv hostnamenode01.myCluster.com 配置存储在华为云控制台选购磁盘，共享模式选择共享，磁盘模式选择VBD(这里使用的是VBD的磁盘，使用oracleasm来配置共享磁盘) 安装ASMLIB参考Centos6.8安装ASMLIB 创建分区注： 我的共享磁盘挂载点为/dev/xvdc OCR_VOT_GIMR磁盘组和DATA磁盘组的冗余类型都选择为External /dev/sdb共100G空间，创建1个40G分区分配给OCR_VOT_GIMR磁盘组使用，创建一个60G分区分配至DATA磁盘组 ASM磁盘要求参考官方文档 在node01上执行，仅分区即可 1234567891011121314151617181920212223242526272829303132[root@node01 ~]# fdisk /dev/xvdcDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x3c07d9cd.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won't be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It's strongly recommended to switch off the mode (command 'c') and change display units to sectors (command 'u').Command (m for help): nCommand action e extended p primary partition (1-4)pPartition number (1-4): 1First cylinder (1-13054, default 1):Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-13054, default 13054): +40GCommand (m for help): nCommand action e extended p primary partition (1-4)pPartition number (1-4): 2First cylinder (5224-13054, default 5224):Using default value 5224Last cylinder, +cylinders or +size&#123;K,M,G&#125; (5224-13054, default 13054):Using default value 13054Command (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks. 分区结果如下： 12345678910[root@node01 ~]# fdisk -l /dev/xvdcDisk /dev/xvdc: 107.4 GB, 107374182400 bytes255 heads, 63 sectors/track, 13054 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x3c07d9cd Device Boot Start End Blocks Id System/dev/xvdc1 1 5223 41953716 83 Linux/dev/xvdc2 5224 13054 62902507+ 83 Linux 创建磁盘组node01执行如下命令创建磁盘组： 123456[root@node01 ~]# oracleasm createdisk OCR_VOT_GIMR /dev/xvdc1Writing disk header: doneInstantiating disk: done[root@node01 ~]# oracleasm createdisk DATA /dev/xvdc2Writing disk header: doneInstantiating disk: done 使用oracleasm listdisks查看已创建的磁盘组，如下： 123[root@node01 ~]# oracleasm listdisksDATAOCR_VOT_GIMR 在node02上扫描node01上创建的磁盘组，如下： 123456[root@node02 ~]# oracleasm scandisksReloading disk partitions: doneCleaning any stale ASM disks...Scanning system for ASM disks...Instantiating disk "OCR_VOT_GIMR"Instantiating disk "DATA" 使用oracleasm listdisks查看扫描到的磁盘组，如下： 123[root@node02 ~]# oracleasm listdisksDATAOCR_VOT_GIMR 至此，安装环境准备完成。 接着看hwcloud上的Oracle RAC 12cR2安装手册(2)--grid的安装]]></content>
      <categories>
        <category>oracle</category>
        <category>rac</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>rac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Performing RMAN Recovery]]></title>
    <url>%2F2017%2F11%2F17%2FPerforming-RMAN-Recovery%2F</url>
    <content type="text"><![CDATA[安装数据库软件(不需要安装实例)略 创建对应路径(与原库路径一致)123456789101112131415161718mkdir -p /u01/app/oracle/oradata/TESTmkdir -p /u01/app/oracle/fast_recovery_areamkdir -p /u01/app/oracle/admin/TESTmkdir /u01/app/oracle/admin/TEST/adumpmkdir /u01/app/oracle/admin/TEST/bdumpmkdir /u01/app/oracle/admin/TEST/cdumpmkdir /u01/app/oracle/admin/TEST/ddumpmkdir -p /u01/app/oracle/oradata/TEST/19A9B2E4ED836CFCE0537680A8C03E8F/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILEmkdir -p /u01/app/oracle/oradata/TEST/BCG/DATAFILEmkdir /u01/app/oracle/oradata/TEST/CONTROLFILEmkdir /u01/app/oracle/oradata/TEST/DATAFILE 开始恢复 rman target / nocatalog 设置DBID可通过原库查询，也可通过控制文件的备份名称获得(备份名称c-DBID-date-num.bak) 1SET DBID 999753383; 恢复spfile 和 pfile123STARTUP NOMOUNT;RESTORE SPFILE FROM '/u01/rmanbak/c-999753383-20170925-00.bak';RESTORE SPFILE TO PFILE '/u01/app/oracle/product/12.1.0/dbhome_1/dbs/initTEST.ora' FROM '/u01/rmanbak/c-999753383-20170925-00.bak'; 结合当前服务器的配置信息修改pfile文件123456789101112131415161718192021222324252627TEST.__data_transfer_cache_size=0TEST.__db_cache_size=1010827260TEST.__java_pool_size=20971520TEST.__large_pool_size=8388608TEST.__oracle_base=&apos;/u01/app/oracle&apos;#ORACLE_BASE set from environmentTEST.__pga_aggregate_target=289406976TEST.__sga_target=1333788670TEST.__shared_io_pool_size=46137344TEST.__shared_pool_size=234881024TEST.__streams_pool_size=8388608*.audit_file_dest=&apos;/u01/app/oracle/admin/TEST/adump&apos;*.audit_trail=&apos;db&apos;*.compatible=&apos;12.1.0.2.0&apos;*.control_files=&apos;/u01/app/oracle/oradata/TEST/CONTROLFILE/current.257.883692833&apos;,&apos;/u01/app/oracle/oradata/TEST/CONTROLFILE/current.258.883692835&apos;*.db_block_size=32768*.db_domain=&apos;&apos;*.db_name=&apos;TEST&apos;*.db_recovery_file_dest_size=30g*.diagnostic_dest=&apos;/u01/app/oracle&apos;*.dispatchers=&apos;(PROTOCOL=TCP) (SERVICE=TESTXDB)&apos;*.enable_pluggable_database=true*.open_cursors=300*.pga_aggregate_target=1310m*.processes=1500*.remote_login_passwordfile=&apos;exclusive&apos;*.resource_manager_plan=&apos;&apos;*.sga_target=5242m 使用pfile文件启动数据库到NOMOUNT状态1STARTUP FORCE NOMOUNT PFILE=&apos;/u01/app/oracle/product/12.1.0/dbhome_1/dbs/initTEST.ora&apos;; 恢复控制文件1RESTORE CONTROLFILE FROM '/u01/rmanbak/c-999753383-20170925-00.bak'; 切换数据库为MOUNT状态1sql &apos;alter database mount&apos;; 执行恢复以下之所以rename，因为新库的数据文件路径发生改变，所以需要rename，可通过再rman中执行report schema查看所有的数据文件名和文件编号 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132CATALOG START WITH '/u01/rmanbak';RUN&#123; ALLOCATE CHANNEL c1 TYPE DISK; SET NEWNAME FOR DATAFILE 1 TO '/u01/app/oracle/oradata/TEST/DATAFILE/system.263.883692841'; SET NEWNAME FOR DATAFILE 2 TO '/u01/app/oracle/oradata/TEST/19A9B2E4ED836CFCE0537680A8C03E8F/DATAFILE/system.264.883692851'; SET NEWNAME FOR DATAFILE 3 TO '/u01/app/oracle/oradata/TEST/DATAFILE/sysaux.265.883692857'; SET NEWNAME FOR DATAFILE 4 TO '/u01/app/oracle/oradata/TEST/19A9B2E4ED836CFCE0537680A8C03E8F/DATAFILE/sysaux.266.883692865'; SET NEWNAME FOR DATAFILE 5 TO '/u01/app/oracle/oradata/TEST/DATAFILE/undotbs1.267.883692869'; SET NEWNAME FOR DATAFILE 6 TO '/u01/app/oracle/oradata/TEST/DATAFILE/undotbs2.270.883692925'; SET NEWNAME FOR DATAFILE 7 TO '/u01/app/oracle/oradata/TEST/DATAFILE/users.271.883692927'; SET NEWNAME FOR DATAFILE 15 TO '/u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/DATAFILE/system.282.884366019'; SET NEWNAME FOR DATAFILE 16 TO '/u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/DATAFILE/sysaux.281.884366019'; SET NEWNAME FOR DATAFILE 20 TO '/u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/DATAFILE/fcprod_01.dbf'; SET NEWNAME FOR DATAFILE 21 TO '/u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/DATAFILE/fcprod_02.dbf'; SET NEWNAME FOR DATAFILE 22 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/system.288.885650835'; SET NEWNAME FOR DATAFILE 23 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/sysaux.289.885650835'; SET NEWNAME FOR DATAFILE 24 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/sugontra_01.dbf'; SET NEWNAME FOR DATAFILE 25 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/sugontra_02.dbf'; SET NEWNAME FOR DATAFILE 33 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/sgtread.dbf'; SET NEWNAME FOR DATAFILE 38 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/system.365.897157457'; SET NEWNAME FOR DATAFILE 39 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sysaux.376.897157457'; SET NEWNAME FOR DATAFILE 42 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/system.886.898112773'; SET NEWNAME FOR DATAFILE 43 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/sysaux.896.898112773'; SET NEWNAME FOR DATAFILE 44 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_01.dbf'; SET NEWNAME FOR DATAFILE 45 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_02.dbf'; SET NEWNAME FOR DATAFILE 50 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_01.dbf'; SET NEWNAME FOR DATAFILE 51 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_02.dbf'; SET NEWNAME FOR DATAFILE 63 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_data.2127.902684869'; SET NEWNAME FOR DATAFILE 64 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/system.4371.904906001'; SET NEWNAME FOR DATAFILE 65 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/sysaux.4372.904906011'; SET NEWNAME FOR DATAFILE 66 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4376.904906531'; SET NEWNAME FOR DATAFILE 67 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4377.904906561'; SET NEWNAME FOR DATAFILE 68 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4378.904906591'; SET NEWNAME FOR DATAFILE 69 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4379.904906621'; SET NEWNAME FOR DATAFILE 70 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4380.904906651'; SET NEWNAME FOR DATAFILE 71 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4381.904906683'; SET NEWNAME FOR DATAFILE 72 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4382.904906713'; SET NEWNAME FOR DATAFILE 73 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4383.904906741'; SET NEWNAME FOR DATAFILE 74 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data.4384.904906771'; SET NEWNAME FOR DATAFILE 75 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/system.9415.906672919'; SET NEWNAME FOR DATAFILE 76 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/sysaux.11560.906672919'; SET NEWNAME FOR DATAFILE 77 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_01.dbf'; SET NEWNAME FOR DATAFILE 78 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_02.dbf'; SET NEWNAME FOR DATAFILE 79 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_03.dbf'; SET NEWNAME FOR DATAFILE 80 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_03.dbf'; SET NEWNAME FOR DATAFILE 81 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_04.dbf'; SET NEWNAME FOR DATAFILE 82 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_05.dbf'; SET NEWNAME FOR DATAFILE 83 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_06.dbf'; SET NEWNAME FOR DATAFILE 84 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_04.dbf'; SET NEWNAME FOR DATAFILE 85 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_03.dbf'; SET NEWNAME FOR DATAFILE 86 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_10.dbf'; SET NEWNAME FOR DATAFILE 87 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_data_6.dbf'; SET NEWNAME FOR DATAFILE 88 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_7.dbf'; SET NEWNAME FOR DATAFILE 89 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_11.dbf'; SET NEWNAME FOR DATAFILE 90 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_8.dbf'; SET NEWNAME FOR DATAFILE 91 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_9.dbf'; SET NEWNAME FOR DATAFILE 92 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_12.dbf'; SET NEWNAME FOR DATAFILE 93 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_10.dbf'; SET NEWNAME FOR DATAFILE 94 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_11.dbf'; SET NEWNAME FOR DATAFILE 95 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_12.dbf'; SET NEWNAME FOR DATAFILE 96 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_13.dbf'; SET NEWNAME FOR DATAFILE 116 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_13.dbf'; SET NEWNAME FOR DATAFILE 117 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_14.dbf'; SET NEWNAME FOR DATAFILE 118 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_15.dbf'; SET NEWNAME FOR DATAFILE 119 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_16.dbf'; SET NEWNAME FOR DATAFILE 120 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_14.dbf'; SET NEWNAME FOR DATAFILE 121 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/system.6863.913669707'; SET NEWNAME FOR DATAFILE 122 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/sysaux.6861.913669707'; SET NEWNAME FOR DATAFILE 123 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_01.dbf'; SET NEWNAME FOR DATAFILE 124 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_02.dbf'; SET NEWNAME FOR DATAFILE 125 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_03.dbf'; SET NEWNAME FOR DATAFILE 126 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_04.dbf'; SET NEWNAME FOR DATAFILE 127 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_05.dbf'; SET NEWNAME FOR DATAFILE 128 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_15.dbf'; SET NEWNAME FOR DATAFILE 129 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_17.dbf'; SET NEWNAME FOR DATAFILE 130 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_data_7.dbf'; SET NEWNAME FOR DATAFILE 131 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_18.dbf'; SET NEWNAME FOR DATAFILE 132 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_19.dbf'; SET NEWNAME FOR DATAFILE 133 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_16.dbf'; SET NEWNAME FOR DATAFILE 134 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_20.dbf'; SET NEWNAME FOR DATAFILE 135 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_21.dbf'; SET NEWNAME FOR DATAFILE 136 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_17.dbf'; SET NEWNAME FOR DATAFILE 137 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_data_4.dbf'; SET NEWNAME FOR DATAFILE 142 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_data_5.dbf'; SET NEWNAME FOR DATAFILE 147 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_data_8.dbf'; SET NEWNAME FOR DATAFILE 149 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_18.dbf'; SET NEWNAME FOR DATAFILE 150 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_data_19.dbf'; SET NEWNAME FOR DATAFILE 151 TO'/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_22.dbf'; SET NEWNAME FOR DATAFILE 152 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_data_9.dbf'; SET NEWNAME FOR DATAFILE 153 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_23.dbf'; SET NEWNAME FOR DATAFILE 154 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_data_6.dbf'; SET NEWNAME FOR DATAFILE 155 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_24.dbf'; SET NEWNAME FOR DATAFILE 156 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_06.dbf'; SET NEWNAME FOR DATAFILE 157 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_25.dbf'; SET NEWNAME FOR DATAFILE 169 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/system01.dbf'; SET NEWNAME FOR DATAFILE 170 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/sysaux01.dbf'; SET NEWNAME FOR DATAFILE 171 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_01.dbf'; SET NEWNAME FOR DATAFILE 172 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_02.dbf'; SET NEWNAME FOR DATAFILE 173 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_03.dbf'; SET NEWNAME FOR DATAFILE 174 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_04.dbf'; SET NEWNAME FOR DATAFILE 175 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_05.dbf'; SET NEWNAME FOR DATAFILE 176 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_06.dbf'; SET NEWNAME FOR DATAFILE 177 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_07.dbf'; SET NEWNAME FOR DATAFILE 178 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_08.dbf'; SET NEWNAME FOR DATAFILE 179 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/clouddemo_09.dbf'; SET NEWNAME FOR DATAFILE 180 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_data_26.dbf'; SET NEWNAME FOR DATAFILE 181 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_07.dbf'; SET NEWNAME FOR TEMPFILE 1 TO '/u01/app/oracle/oradata/TEST/TEMPFILE/temp.268.883692873'; SET NEWNAME FOR TEMPFILE 2 TO '/u01/app/oracle/oradata/TEST/19A9B2E4ED836CFCE0537680A8C03E8F/TEMPFILE/temp.269.883692873'; SET NEWNAME FOR TEMPFILE 3 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_temp.dbf'; SET NEWNAME FOR TEMPFILE 4 TO '/u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/TEMPFILE/temp.283.884366053'; SET NEWNAME FOR TEMPFILE 5 TO '/u01/app/oracle/oradata/TEST/1A325228C22837A9E0537680A8C0AB5A/DATAFILE/fcprod_temp.dbf'; SET NEWNAME FOR TEMPFILE 6 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/TEMPFILE/temp.290.885650869'; SET NEWNAME FOR TEMPFILE 7 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/sugontra_temp.dbf'; SET NEWNAME FOR TEMPFILE 8 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/TEMPFILE/temp.9418.906672955'; SET NEWNAME FOR TEMPFILE 9 TO '/u01/app/oracle/oradata/TEST/2E2B9591B4C13CC9E0537680A8C09CCF/DATAFILE/zzmetro_temp.dbf'; SET NEWNAME FOR TEMPFILE 10 TO '/u01/app/oracle/oradata/TEST/1B5D770684A12982E0537680A8C00768/DATAFILE/sgtread_temp.dbf'; SET NEWNAME FOR TEMPFILE 11 TO '/u01/app/oracle/oradata/TEST/BCG/DATAFILE/temp01.dbf'; SET NEWNAME FOR TEMPFILE 13 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/TEMPFILE/temp.462.897157491'; SET NEWNAME FOR TEMPFILE 14 TO '/u01/app/oracle/oradata/TEST/25C07163596B0AD0E0537680A8C0EAE1/DATAFILE/sugonpro_temp.dbf'; SET NEWNAME FOR TEMPFILE 15 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/TEMPFILE/temp.898.898112805'; SET NEWNAME FOR TEMPFILE 16 TO '/u01/app/oracle/oradata/TEST/268AC0DAD4617497E0537680A8C0152A/DATAFILE/absenpro_temp.dbf'; SET NEWNAME FOR TEMPFILE 19 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/ljbb_temp_01.dbf'; SET NEWNAME FOR TEMPFILE 20 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/TEMPFILE/temp.6857.913669745'; SET NEWNAME FOR TEMPFILE 21 TO '/u01/app/oracle/oradata/TEST/347488B0A2DA5C21E0537680A8C0E0CA/DATAFILE/shacpro_temp.dbf'; SET NEWNAME FOR TEMPFILE 25 TO '/u01/app/oracle/oradata/TEST/2CB869B96579626EE0530C30A8C0E46C/DATAFILE/temp001.dbf'; RESTORE DATABASE; switch DATAFILE all; switch tempfile all; RECOVER DATABASE;&#125; 由于归档日志缺失，只能部分恢复数据库，也就是只能恢复到rman备份的那一刻，根据报错显示的SCN号，恢复到指定SCN 1RECOVER DATABASE UNTIL SCN 10144773006017; 根据pfile创建spfile1Create spfile from pfile='/u01/app/oracle/product/12.1.0/dbhome_1/dbs/initTEST.ora'; 修改日志文件路径1234567891011121314151617select member from v$logfile;mkdir -p /u01/app/oracle/oradata/TEST/ONLINELOG;mkdir -p /u01/app/oracle/oradata/TEST/STANDBYLOG;alter database rename file '+DATA/TEST/ONLINELOG/group1.259.883692835' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group1.259.883692835';alter database rename file '+DATA/TEST/ONLINELOG/group1.260.883692837' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group1.260.883692837';alter database rename file '+DATA/TEST/ONLINELOG/group2.261.883692837' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group2.261.883692837';alter database rename file '+DATA/TEST/ONLINELOG/group2.262.883692839' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group2.262.883692839';alter database rename file '+DATA/TEST/ONLINELOG/group3.272.883704715' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group3.272.883704715';alter database rename file '+DATA/TEST/ONLINELOG/group3.273.883704717' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group3.273.883704717';alter database rename file '+DATA/TEST/ONLINELOG/group4.274.883704719' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group4.274.883704719';alter database rename file '+DATA/TEST/ONLINELOG/group4.275.883704721' to '/u01/app/oracle/oradata/TEST/ONLINELOG/group4.275.883704721';alter database rename file '+DATA/TEST/STANDBYLOG/standby_group11.log' to '/u01/app/oracle/oradata/TEST/STANDBYLOG/standby_group11.log';alter database rename file '+DATA/TEST/STANDBYLOG/standby_group12.log' to '/u01/app/oracle/oradata/TEST/STANDBYLOG/standby_group12.log';alter database rename file '+DATA/TEST/STANDBYLOG/standby_group13.log' to '/u01/app/oracle/oradata/TEST/STANDBYLOG/standby_group13.log';alter database rename file '+DATA/TEST/STANDBYLOG/standby_group14.log' to '/u01/app/oracle/oradata/TEST/STANDBYLOG/standby_group14.log';alter database rename file '+DATA/TEST/STANDBYLOG/standby_group15.log' to '/u01/app/oracle/oradata/TEST/STANDBYLOG/standby_group15.log';alter database rename file '+DATA/TEST/STANDBYLOG/standby_group16.log' to '/u01/app/oracle/oradata/TEST/STANDBYLOG/standby_group16.log'; 启动数据库由于修改了数据库日志路径，第一次启动需要resetlogs 1alter database open resetlogs; 创建lisenter1netca /silent /responsefile /u01/software/database/response/netca.rsp]]></content>
      <categories>
        <category>oracle</category>
        <category>rman</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>rman</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rebuild oracle password file]]></title>
    <url>%2F2017%2F10%2F19%2Frebuild-oracle-password-file%2F</url>
    <content type="text"><![CDATA[起因之前通过rman将一台生产库恢复到了另外一台服务器上。今天使用sys用户连接数据库时，一直报用户名密码错误，后台通过sys / as sysdba登录服务器之后，使用alter user sys identified by newpassword修改密码之后依然不能使用密码登录数据库，因此才有如下解决方式。 原因是因为数据库回复后并没有生成对应的密码文件，因此sys用户无法作为sysdba登录，在开始之前需要先检查数据库的remote_login_passwordfile参数为exclusive，这也是oracle数据库的默认值。 检查方式如下： 1SQL&gt; show parameter remote_login_passwordfile VALUE值为EXCLUSIVE即可 关于密码文件： oracle官网解释说在用DBCA创建数据库对的时候会自动创建密码文件，所以用DBCA创建的数据库一般是没问题的，但是我这次是用rman恢复的实例，不知道是否我原库是RAC的原因，恢复完之后并没有密码文件 具有管理员权限的角色(SYSDBA, SYSOPER, SYSBACKUP, SYSDG, or SYSKM)都会通过密码文件进行验证，而不是通过数据库来进行验证，但前提是该用户在数据库中存在。 密码文件中保存的密码是区分大小写的 RAC的密码文件是保存在ASM磁盘中的 解决方案重建密码文件即可，其中密码文件的路径为$ORACLE_HOME/dbs/orapw$instance_name 其中最后的文件名必须是orapw与instance_name拼接起来的名字，假设这里的instance_name为TEST 使用如下命令重建密码文件 1$ orapwd file="$ORACLE_HOME/dbs/orapwTEST" password=testtest 重建之后即可正常使用密码登录sys了，其中password指定的就是sys的密码 验证密码文件是否生效可登陆数据库后同若如下命令验证 1SQL&gt; select * from v$pwfile_users; 如果密码文件没生效，则查出的结果为空，如果密码生效了，则查出的是记录在密码文件中的用户，默认仅有SYS用户。]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[create LVM disk]]></title>
    <url>%2F2017%2F07%2F19%2Fcreate-LVM-disk%2F</url>
    <content type="text"><![CDATA[创建物理分区查看是否有未分区的磁盘1234567891011121314151617181920212223[root@srm-fs ~]# fdisk -lDisk /dev/xvda: 42.9 GB, 42949672960 bytes255 heads, 63 sectors/track, 5221 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x000d6814 Device Boot Start End Blocks Id System/dev/xvda1 1 523 4194304 82 Linux swap / SolarisPartition 1 does not end on cylinder boundary./dev/xvda2 * 523 5222 37747712 83 LinuxDisk /dev/xvdb: 536.9 GB, 536870912000 bytes255 heads, 63 sectors/track, 65270 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000Disk /dev/xvdc: 536.9 GB, 536870912000 bytes255 heads, 63 sectors/track, 65270 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 发现有两个未使用的磁盘，这里以xvdb为例 在磁盘xvdb上创建xvdb1分区12345678910111213141516171819202122232425262728[root@srm-fs ~]# fdisk /dev/xvdbDevice contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0xf72f347d.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won&apos;t be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It&apos;s strongly recommended to switch off the mode (command &apos;c&apos;) and change display units to sectors (command &apos;u&apos;).Command (m for help): nCommand action e extended p primary partition (1-4)pPartition number (1-4): 1First cylinder (1-65270, default 1):Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-65270, default 65270):Using default value 65270添加磁盘系统表id为8e(LVM的标识)Command (m for help): tSelected partition 1Hex code (type L to list codes): 8eChanged system type of partition 1 to 8e (Linux LVM)保存分区表Command (m for help): wThe partition table has been altered!Calling ioctl() to re-read partition table. 将分区划分为物理卷，主要是添加LVM属性信息并划分PE存储单元.1234567891011121314151617[root@srm-fs ~]# pvcreate /dev/xvdb1 Physical volume &quot;/dev/xvdb1&quot; successfully created[root@srm-fs ~]# pvs PV VG Fmt Attr PSize PFree /dev/xvdb1 lvm2 a-- 499.99g 499.99g[root@srm-fs ~]# pvdisplay &quot;/dev/xvdb1&quot; is a new physical volume of &quot;499.99 GiB&quot; --- NEW Physical volume --- PV Name /dev/xvdb1 VG Name PV Size 499.99 GiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID 5KBToI-5jzg-P0ra-kdZO-3bt2-MRS2-Hbbjk3 创建卷组vg-atm, 并将分区xvdb1加入卷组其中PE为卷组的最小存储单元，可通过-s命令修改1234567891011121314151617181920212223242526[root@srm-fs ~]# vgcreate vg-atm /dev/xvdb1 Volume group &quot;vg-atm&quot; successfully created[root@srm-fs ~]# vgs VG #PV #LV #SN Attr VSize VFree vg-atm 1 0 0 wz--n- 499.99g 499.99g[root@srm-fs ~]# vgdisplay --- Volume group --- VG Name vg-atm System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 1 VG Access read/write VG Status resizable MAX LV 0 Cur LV 0 Open LV 0 Max PV 0 Cur PV 1 Act PV 1 VG Size 499.99 GiB PE Size 4.00 MiB Total PE 127998 Alloc PE / Size 0 / 0 Free PE / Size 127998 / 499.99 GiB VG UUID 8Enzk5-pm35-z6OQ-ee2v-RW4X-vp1n-00Z2Ua 从vg-atm卷组创建逻辑分区lv-atm11234567891011121314151617181920212223242526[root@srm-fs ~]# lvcreate -l 127998 -n lv-atm1 vg-atm Logical volume &quot;lv-atm1&quot; created其中，指定创建的逻辑分区大小有两种方式:-L 后面指定大小(e.g. 499G)不能超过卷组的free size，可通过vgdisplay查看-l 后面指定PE大小(e.g. 127998)不能超过卷组的free PE大小，可通过vgdisplay查看[root@srm-fs ~]# lvs LV VG Attr LSize Pool Origin Data% Move Log Cpy%Sync Convert lv-atm1 vg-atm -wi-a----- 499.99g[root@srm-fs ~]# lvdisplay --- Logical volume --- LV Path /dev/vg-atm/lv-atm1 LV Name lv-atm1 VG Name vg-atm LV UUID U8nc8o-aa2p-NeNw-JMie-mjoh-eRfo-wKdQuS LV Write Access read/write LV Creation host, time srm-fs, 2017-06-07 10:42:57 +0800 LV Status available # open 0 LV Size 499.99 GiB Current LE 127998 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 在逻辑分区lv-atm上创建文件系统1234567891011121314151617181920212223[root@srm-fs ~]# mkfs.ext4 /dev/vg-atm/lv-atm1mke2fs 1.41.12 (17-May-2010)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks32768000 inodes, 131069952 blocks6553497 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=42949672964000 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 102400000Writing inode tables: done Creating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: doneThis filesystem will be automatically checked every 25 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override. 挂载文件系统1234567891011[root@srm-fs ~]# mount /dev/vg-atm/lv-atm1 /u01[root@srm-fs ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/xvda2 36G 2.4G 32G 7% /tmpfs 487M 0 487M 0% /dev/shm/dev/mapper/vg--atm-lv--atm1 493G 198M 467G 1% /u01[root@srm-fs ~]# mount | grep u01/dev/mapper/vg--atm-lv--atm1 on /u01 type ext4创建好之后,会在/dev/mapper/生成一个软连接名字为”卷组-逻辑卷”从上面的命令也可以看出来。[root@srm-fs ~]# ll /dev/vg-atm/lv-atm1lrwxrwxrwx 1 root root 7 Jun 7 13:32 /dev/vg-atm/lv-atm1 -&gt; ../dm-0 配置开机自动挂载12345678查看新增分区的UUID[root@srm-fs ~]# blkid/dev/xvda1: UUID=&quot;25ec3bdb-ba24-4561-bcdc-802edf42b85f&quot; TYPE=&quot;swap&quot;/dev/xvda2: UUID=&quot;1a1ce4de-e56a-4e1f-864d-31b7d9dfb547&quot; TYPE=&quot;ext4&quot;/dev/xvdb1: UUID=&quot;5KBToI-5jzg-P0ra-kdZO-3bt2-MRS2-Hbbjk3&quot; TYPE=&quot;LVM2_member&quot;/dev/mapper/vg--atm-lv--atm1: UUID=&quot;eb80318b-480f-486c-8b7c-6093974139f8&quot; TYPE=&quot;ext4&quot;编辑/etc/fstab,添加如下内容UUID=eb80318b-480f-486c-8b7c-6093974139f8&quot; TYPE=&quot;ext4 /u01 ext4 defaults 1 1 添加新的物理分区至卷组vg-atm同样需要先创建pv，具体步骤省略1vgextend vg-atm /dev/xvdc1 扩展逻辑分区lv-atm12lvextend -L +500M /dev/vg-atm/lv-atm1路径为逻辑分区的路径，可通过lvdisplay查看]]></content>
      <categories>
        <category>LINUX</category>
        <category>LVM</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>LVM</tag>
        <tag>DISK</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenVpn4Centos]]></title>
    <url>%2F2017%2F07%2F11%2FOpenVpn4Centos%2F</url>
    <content type="text"><![CDATA[声明 OpenVpn版本: 2.4.3 Centos版本: 6.8 本机IP: 192.168.5.3 实现功能： 客户端需通过用户名密码登录 用户名密码为系统用户 不同用户分为不同网段 通过VPN服务器的iptables来限制不同网段的访问，间接限制用户先实现证书登录，再实现用户名密码登录，也可以跳过证书登录的配置，直接实现用户名密码登录 用户 获得网段 可访问网段 普通用户 10.0.2.0/24 192.168.3.0/24 192.168.4.0/24 192.168.5.0/24 特殊用户 10.0.1.0/24 192.168.0.0/24 192.168.1.0/24 192.168.5.0/24 管理员 10.0.0.0/24 192.168.0.0/16 安装安装epel库12wget http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpmrpm -Uvh epel-release-6-8.noarch.rpm 安装openvpn1yum install openvpn 安装easy-rs该包用来制作ca证书，服务端证书，客户端证书。最新的为easy-rsa31234wget https://github.com/OpenVPN/easy-rsa/archive/master.zipunzip master.zipmv easy-rsa-mater/ easy-rsa/cp -R easy-rsa/ /etc/openvpn/ 编辑vars文件 先进入/etc/openvpn/easy-rsa/easyrsa3目录 1cd /etc/openvpn/easy-rsa/easyrsa3/ 复制vars.example 为vars 1cp vars.example vars 修改vars文件的如下字段 123456set_var EASYRSA_REQ_COUNTRY “CN” //根据自己情况更改set_var EASYRSA_REQ_PROVINCE “ShangHai”set_var EASYRSA_REQ_CITY “ShangHai”set_var EASYRSA_REQ_ORG “Test”set_var EASYRSA_REQ_EMAIL “test@test.com”set_var EASYRSA_REQ_OU “TestOpenVpn” 初始化easyrsa12cd /etc/openvpn/easy-rsa/easyrsa3/./easyrsa init-pki 创建CA(根)证书123456789101112131415161718192021./easyrsa build-caGenerating a 2048 bit RSA private key…………………………………….+++……+++writing new private key to ‘/root/easy-rsa/easyrsa3/pki/private/ca.key’Enter PEM pass phrase:Verifying – Enter PEM pass phrase:—–You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter ‘.’, the field will be left blank.—–Common Name (eg: your user, host, or server name) [Easy-RSA CA]:TestCA creation complete and you may now import and sign cert requests.Your new CA certificate file for publishing is at:/root/easy-rsa/easyrsa3/pki/ca.crt 注意：在上述部分需要输入PEM密码 PEM pass phrase，输入两次，此密码必须记住，不然以后不能为证书签名。还需要输入common name 通用名，这个你自己随便设置个独一无二的。 创建服务器端证书12345678910111213141516171819./easyrsa gen-req server nopassGenerating a 2048 bit RSA private key……………………………………………………………………..+++……………………+++writing new private key to ‘/root/easy-rsa/easyrsa3/pki/private/server.key’—–You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter ‘.’, the field will be left blank.—–Common Name (eg: your user, host, or server name) [server]:TestServerKeypair and certificate request completed. Your files are:req: /root/easy-rsa/easyrsa3/pki/reqs/server.reqkey: /root/easy-rsa/easyrsa3/pki/private/server.key 该过程中需要输入common name，随意但是不要跟之前的根证书的一样 签约服务端证书1234567891011121314151617181920212223./easyrsa sign server serverYou are about to sign the following certificate.Please check over the details shown below for accuracy. Note that this requesthas not been cryptographically verified. Please be sure it came from a trustedsource or that you have verified the request checksum with the sender.Request subject, to be signed as a server certificate for 3650 days:subject=commonName = TestServerType the word ‘yes’ to continue, or any other input to abort.Confirm request details: yesUsing configuration from /root/easy-rsa/easyrsa3/openssl-1.0.cnfEnter pass phrase for /root/easy-rsa/easyrsa3/pki/private/ca.key:Check that the request matches the signatureSignature okThe Subject’s Distinguished Name is as followscommonNameRINTABLE:’TestServer’Certificate is to be certified until Apr 20 06:02:10 2024 GMT (3650 days)Write out database with 1 new entriesData Base UpdatedCertificate created at: /root/easy-rsa/easyrsa3/pki/issued/server.crt 该命令中.需要你确认生成，要输入yes，还需要你提供我们当时创建CA时候的密码。如果你忘记了密码，那你就重头开始再来一次吧。 创建Diffie-Hellman12345678./easyrsa gen-dhNote: using Easy-RSA configuration from: ./varsGenerating DH parameters, 2048 bit long safe prime, generator 2This is going to take a long time……..+……………………………….+..+…………………………………………………………………………………………………………………………….DH parameters of size 2048 created at /etc/openvpn/easy-rsa/easyrsa3/pki/dh.pem 创建客户端证书以下是为了实现证书登录而做的操作。为了避免与服务器端证书冲突，因此另外复制一份easyrsa到另一个文件夹下操作。进入root目录新建client文件夹(也可以是任意目录，只要有权限访问)，文件夹可随意命名，然后拷贝前面解压得到的easy-ras文件夹到client文件夹,进入下列目录,并初始化12345cd /root/mkdir clientcp -R easy-rsa/ client/cd client/easy-rsa/easyrsa3/./easyrsa init-pki 创建客户端key及生成证书（记住生成是自己输入的密码） 1./easyrsa gen-req client (名字自定义) 将的到的client.req导入然后签约证书 123cd /etc/openvpn/easy-rsa/easyrsa3/./easyrsa import-req /root/client/easy-rsa/easyrsa3/pki/reqs/client.req client./easyrsa sign client client(后面这个为客户端证书的名字，前面的为固定格式) 过程跟签约server类似，需要输入CA证书的密码 现在说一下我们上面都生成了什么东西服务端：(/cetc/openvpn/easy-rsa/文件夹) /etc/openvpn/easy-rsa/easyrsa3/pki/ca.crt /etc/openvpn/easy-rsa/easyrsa3/pki/reqs/server.req /etc/openvpn/easy-rsa/easyrsa3/pki/reqs/client.req /etc/openvpn/easy-rsa/easyrsa3/pki/private/ca.key /etc/openvpn/easy-rsa/easyrsa3/pki/private/server.key /etc/openvpn/easy-rsa/easyrsa3/pki/issued/server.crt /etc/openvpn/easy-rsa/easyrsa3/pki/issued/client.crt /etc/openvpn/easy-rsa/easyrsa3/pki/dh.pem 客户端：(root/client/easy-rsa文件夹) /root/client/easy-rsa/easyrsa3/pki/private/client.key /root/client/easy-rsa/easyrsa3/pki/reqs/client.req //这个文件被我们导入到了服务端,所以那里也有 将生成的证书拷贝到指定文件夹(/etc/openvpn/keys)1234cp /etc/openvpn/easy-rsa/easyrsa3/pki/ca.crt /etc/openvpn/keyscp /etc/openvpn/easy-rsa/easyrsa3/pki/private/server.key /etc/openvpn/keyscp /etc/openvpn/easy-rsa/easyrsa3/pki/issued/server.crt /etc/openvpn/keyscp /etc/openvpn/easy-rsa/easyrsa3/pki/dh.pem /etc/openvpn/keys 生成ta.key文件并移动到/etc/openvpn/keys12openvpn --genkey --secret ta.keymv ta.key /etc/openvpn/keys 编辑server的配置文件当你安装好了openvpn时候，他会提供一个server配置的文件例子，在/usr/share/doc/openvpn-2.4.3/sample/sample-config-files下会有一个server.conf文件，我们将这个文件复制到/etc/openvpn1cp /usr/share/doc/openvpn-2.4.3/sample/sample-config-files/server.conf /etc/openvpn 修改配置文件为如下内容 12345678910111213141516171819202122232425262728293031323334local 192.168.5.3 #本地IP，既服务器的IP地址port 1194 #vpn端口proto udp #使用UDP协议，也可以选择tcp协议dev tun #相对应的tab，tab是桥接模式，tun为虚拟网卡模式ca /etc/openvpn/keys/ca.crt #ca证书cert /etc/openvpn/keys/server.crt #服务器端证书key /etc/openvpn/keys/server.key #服务器端的key，需保密dh /etc/openvpn/keys/dh.pem #dh证书server 10.0.2.0 255.255.255.0 #普通vpn用户虚拟IP的网段ifconfig-pool-persist /etc/openvpn/ipp.txt #虚拟IP记录文件，防止重复分发IPpush &quot;route 192.168.0.0 255.255.255.0&quot; #网客户端注入route规则，用来实现部分网段走vpn， 其他网段仍然走客户端电脑的默认链路push &quot;route 192.168.1.0 255.255.255.0&quot;push &quot;route 192.168.2.0 255.255.255.0&quot;push &quot;route 192.168.3.0 255.255.255.0&quot;push &quot;route 192.168.4.0 255.255.255.0&quot;push &quot;route 192.168.5.0 255.255.255.0&quot;client-config-dir /etc/openvpn/ccd #用户个性化配置目录，特殊用户与管理员用户 的网段就是通过这个文件夹下的配置实现的route 10.0.0.0 255.255.255.0 #添加本地route，将特殊用户与管理员用户 的网段加入vpn服务器的路由表中route 10.0.1.0 255.255.255.0push &quot;dhcp-option DNS 114.114.114.114&quot; #为客户端电脑得到的虚拟IP推送DNSduplicate-cn #允许同一个证书或同一个用户同一时间多次登录keepalive 10 120 #客户端与服务器的心跳包，互相知道对方是否断开tls-auth /etc/openvpn/keys/ta.key 0 #ta证书，需保密cipher AES-256-CBC #加密规则comp-lzo #兼容旧的客户端max-clients 100 #客户端数量persist-keypersist-tunstatus /etc/openvpn/logs/openvpn-status.log #日志文件log /etc/openvpn/logs/openvpn.log #日志文件verb 3 #日志等级 创建 /etc/openvpn/logs文件夹创建 /etc/openvpn/ccd文件夹 配置特殊用户的个性化配置文件名必须与客户端证书名或者与下面即将配置的用户名密码登录的用户名一致，一个用户一个对应的文件，如果没有，则按默认配置这里假设client为特殊用户，既获得的网段在192.168.1.0/24。需要创建client对应的客户端证书(如果使用用户名密码登录，需要创建对应用户)123456789101112131415161718192021222324252627touch clientvi clientifconfig-push 10.0.1.1 10.0.1.2# 这里是指定该用户的IP，既直接固定IP，而不是随机分配。暂时没找到指定IP段的方法。因此，通过固定IP的方式来达到特殊用户属于特殊网段# 这里指定的是一对IP，表示虚拟客户端和服务器的IP端点。它们必须从连续的/30子网网段中获取(这里是/30表示xxx.xxx.xxx.xxx/30，即子网掩码位数为30)，以便于与Windows客户端和TAP-Windows驱动兼容。暂时还没理解。明确地说，每个端点的IP地址对的最后8位字节必须取自下面的集合：[ 1, 2] [ 5, 6] [ 9, 10] [ 13, 14][ 17, 18] [ 21, 22] [ 25, 26] [ 29, 30] [ 33, 34] [ 37, 38] [ 41, 42] [ 45, 46][ 49, 50] [ 53, 54] [ 57, 58] [ 61, 62] [ 65, 66] [ 69, 70] [ 73, 74] [ 77, 78][ 81, 82] [ 85, 86] [ 89, 90] [ 93, 94] [ 97, 98] [101,102] [105,106] [109,110] [113,114] [117,118] [121,122] [125,126] [129,130] [133,134] [137,138] [141,142] [145,146] [149,150] [153,154] [157,158][161,162] [165,166] [169,170] [173,174] [177,178] [181,182] [185,186] [189,190] [193,194] [197,198] [201,202] [205,206] [209,210] [213,214] [217,218] [221,222] [225,226] [229,230] [233,234] [237,238][241,242] [245,246] [249,250] [253,254] 下载openvpn客户端，并进行配置用sftp将我们在vpn服务器上生成的客户端证书和key下载到客户端电脑，包括如下四个文件 /etc/openvpn/easy-rsa/easyrsa3/pki/ca.crt /etc/openvpn/easy-rsa/easyrsa3/pki/issued/client.crt /root/client/easy-rsa/easyrsa3/pki/private/client.key /etc/openvpn/keys/ta.key去官网下载openvpn客户端进行安装，然后安装目录找到simple-config，默认为C:\Program Files\OpenVPN\sample-config\client.ovpn。将client.ovpn 复制到openvpn的config目录下，默认为C:\Program Files\OpenVPN\config将下载到的四个文件同样放入config目录下，默认为C:\Program Files\OpenVPN\config 修改配置文件为如下内容：12345678910111213141516client #标记为客户端dev tun #与服务器端配置一致proto udp #与服务器端配置一致remote 122.112.219.248 1194 #服务器端IP与端口resolv-retry infinitenobindpersist-keypersist-tunca ca.crt #ca证书cert client.crt #客户端证书key client.key #客户端证书的keyremote-cert-tls server #服务器证书的名字tls-auth ta.key 1 #ta证书，如果服务器端配置，则客户端必须配置cipher AES-256-CBC #与服务器端配置一致comp-lzo #与服务器端配置一致verb 3 #日志级别 经过以上配置，客户端就能连接上vpn服务器了(服务器端的1194端口要开放)，但是并不能访问内网服务器，因为vpn服务器没有配置虚拟ip的转发。 配置服务器端iptables通过如下命令来达到将某个网段的IP转发到主网卡上，以达到与内网服务器通信的目的。1iptables -t nat -A POSTROUTING -s 10.0.1.0/24 -d 192.168.0.0/24 -o eth0 -j MASQUERADE 为了实现不同用户不同权限，需要做如下操作来限制不同网段的用户的访问权限1234567iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADEiptables -t nat -A POSTROUTING -s 10.0.1.0/24 -d 192.168.0.0/24 -o eth0 -j MASQUERADEiptables -t nat -A POSTROUTING -s 10.0.1.0/24 -d 192.168.1.0/24 -o eth0 -j MASQUERADEiptables -t nat -A POSTROUTING -s 10.0.1.0/24 -d 192.168.5.0/24 -o eth0 -j MASQUERADEiptables -t nat -A POSTROUTING -s 10.0.2.0/24 -d 192.168.3.0/24 -o eth0 -j MASQUERADEiptables -t nat -A POSTROUTING -s 10.0.2.0/24 -d 192.168.4.0/24 -o eth0 -j MASQUERADEiptables -t nat -A POSTROUTING -s 10.0.2.0/24 -d 192.168.5.0/24 -o eth0 -j MASQUERADE 经过如此配置，即可访问内网配置完成后，使用如下命令保存iptables 规则到文件1service iptables save 实现用户名密码登录在经过以上配置后，再来实现用户名密码登录就简单多了，只需要改一些配置即可。 修改服务器端配置编辑/etc/openvpn/server.conf,添加如下内容123plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-pam.so login #我是64位操作系统client-cert-not-required #只需验证用户名密码，不要求客户端证书username-as-common-name #用户名做common-name，既用户名相当于客户端名，个性化的时候使用用户名即可。 编辑客户端配置文件，既C:\Program Files\OpenVPN\sample-config\client.ovpn注释掉如下内容12;cert client.crt;key client.key 添加如下内容1auth-user-pass 创建服务器用户，由于仅作为vpn用户登录，因此建议创建不带home目录，没有登录权限的用户12useradd -M user1 -s /sbin/nologinecho &quot;password&quot; | passwd user1 --stdin]]></content>
      <categories>
        <category>OpenVpn</category>
      </categories>
      <tags>
        <tag>OpenVpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[s3fs on obs]]></title>
    <url>%2F2017%2F06%2F21%2Fs3fs-on-obs%2F</url>
    <content type="text"><![CDATA[s3fs简介s3fs 是一款用于 Amazon S3 在 Linux 环境下的命令行工具，并为商业和私人免费使用，只需支付对应的存储服务的费用。它的主要功能是能够把桶（Bucket）挂载到本地目录，进行文件、文件夹的拷入、拷出和删除等操作，即完成对桶内文件、文件夹的上传、下载和删除操作。 下载s3fs登录网址 http://code.google.com/p/s3fs/downloads/list 进入下载界面，选择相应版本，单击“Download”进行下载。本文档以s3fs-1.74.tar.gz为例 安装s3fs安装依赖12345678910111213141516yum install fuse.x86_64 fuse-devel.x86_64 fuse-libs.x86_64 libconfuse-devel.x86_64 libconfuse.x86_64 gcc-c++.noarch curl.x86_64 libcurl-devel.x86_64 libcurl.x86_64 libxml2.x86_64 libxml2-devel.x86_64 openssl-devel.x86_64# 检查fuse版本(必须要大于2.8.4)rpm -qa | grep fuse# 若小于2.8.4，则需要用源码安装新版的fuse，如下yum remove fuse fuse-develtar -xvf fuse-2.8.4.tarcd fuse-2.8.4./configure --prefix=/usr/local/fusemakemake installecho /usr/local/fuse/lib &gt;&gt; /etc/ld.so.confecho &quot;export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig/:/usr/local/fuse/lib/pkgconfig/&quot; &gt;&gt; /etc/profilesource /etc/profileldconfigmodprobe fusepkg-config --modversion fuse 解压1tar -zxvf s3fs-1.74.tar.gz 安装123cd s3fs-1.74./configuremake &amp;&amp; make install 配置秘钥12345vi /etc/passwd-s3fs# 添加秘钥，格式如下AK:SK# 更改权限chmod 640 /etc/passwd-s3fs 创建obs用户12groupadd obsuseradd -g obs obs 用户obs用户创建cache文件夹1mkdir .obs_cache 挂载1s3fs www.going-link.com /obs -o host=http://obs.myhwclouds.com -o umask=0022 -o uid=501 -o gid=501 -o use_cache=/home/obs/.obs_cache -o allow_other]]></content>
      <categories>
        <category>华为云</category>
        <category>obs</category>
      </categories>
      <tags>
        <tag>华为云</tag>
        <tag>obs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[duplicity install]]></title>
    <url>%2F2017%2F06%2F20%2Fduplicity-install%2F</url>
    <content type="text"><![CDATA[安装环境依赖123yum install -y gcc-c++ librsync python-lockfile python-urllib3 python-setuptools python-devel librsync-devel python-pippip install oss2 安装123tar zxvf duplicity.tar.gzcd duplicitypython setup.py install]]></content>
      <categories>
        <category>duplicity</category>
        <category>install</category>
      </categories>
      <tags>
        <tag>duplicity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis sentinel]]></title>
    <url>%2F2017%2F06%2F15%2Fredis-sentinel%2F</url>
    <content type="text"><![CDATA[更新日志 修改redis-sentinel的配置文件, 添加sentinel auth-pass mymaster 123456， 解决新版redis, master宕机后不能自动切换的问题前言该文章只是简单的记录redis sentinel的安装过程，并没有深度优化，只能保证安装完成后可以使用。后续再继续优化。master ip: 100.65.9.250slave1 ip: 100.65.16.158slave2 ip: 100.65.16.162 Redis安装redis的安装包去redis官网下载安装依赖1yum -y install gcc gcc-c++ tcl 编译123tar -zxvf redis-3.2.9.tar.gzcd redis-3.2.9make 这一步可能出现如下错误123456789cd src &amp;&amp; make allmake[1]: Entering directory `/root/redis-3.2.9/src&apos; CC adlist.oIn file included from adlist.c:34:zmalloc.h:50:31: error: jemalloc/jemalloc.h: No such file or directoryzmalloc.h:55:2: error: #error &quot;Newer version of jemalloc required&quot;make[1]: *** [adlist.o] Error 1make[1]: Leaving directory `/root/redis-3.2.9/src&apos;make: *** [all] Error 2 执行如下命令解决1make distclean 再重新make 安装12345cd srcmake install PREFIX=/usr/local/rediscd ..cp redis.conf /usr/local/redis/cp sentinel.conf /usr/local/redis/ 配置master和slave的配置文件编辑/usr/local/redis/redis.conf修改如下内容123456789101112131415bind 0.0.0.0# 访问master的密码 由于master和slave会互换，所以两个密码都最好配上masterauth 123456# redis的访问密码requirepass 123456# 开启守护模式 daemonize yes # 指定数据存储目录 dir /data/redis # 打开aof持久化 appendonly yes # 每秒一次aof写 appendfsync everysec# 修改日志路径logfile &quot;/var/log/redis.log&quot; 配置slave的配置文件在以上配置文件的基础上添加如下内容1234# 指定所属的主机 slaveof 100.65.9.250 6379 # 指定从机&quot;只读&quot; slave-read-only yes 配置sentinel配置文件编辑所有服务器的/usr/local/redis/sentinel.conf文件添加或修改如下内容12345678910111213141516bind 0.0.0.0daemonize yeslogfile &quot;/var/log/sentinel.log&quot;# sentinel需要监控的master/slaver信息，格式为sentinel monitor &lt;mastername&gt; &lt;masterIP&gt; &lt;masterPort&gt; &lt;quorum&gt; # 其中&lt;quorum&gt;应该小于集群中slave的个数，当失效的节点数超过了&lt;quorum&gt;,则认为整个体系结构失效sentinel monitor mymaster 100.65.9.250 6379 2sentinel auth-pass mymaster 123456# master被当前sentinel实例认定为失效的间隔时间，格式为sentinel down-after-milliseconds &lt;mastername&gt; &lt;milliseconds&gt;sentinel down-after-milliseconds mymaster 10000# 当新master产生时，同时进行“slaveof”到新master并进行同步复制的slave个数 # 在salve执行salveof同步时，将会终止客户端请求。 # 此值较大,意味着“集群”终止客户端请求的时间总和和较大。 # 此值较小,意味着“集群”在故障转移期间，多个salve向客户端提供服务时仍然使用旧数据。sentinel parallel-syncs mymaster 1# failover过期时间。当failover开始后，在此时间内仍然没有触发任何failover操作，当前sentinel将会认为此次failoer失败。sentinel failover-timeout mymaster 60000 启动三台服务器的redis1/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf 启动三台服务器的sentinel先确保redis已经启动1/usr/local/redis/bin/redis-sentinel /usr/local/redis/sentinel.conf 测试在任意一个节点上查看主从机的复制信息查看master节点信息1234567891011[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.9.250 -p 6379 -a 123456 info Replication# Replicationrole:masterconnected_slaves:2slave0:ip=100.65.16.158,port=6379,state=online,offset=2437,lag=0slave1:ip=100.65.16.162,port=6379,state=online,offset=2437,lag=0master_repl_offset:2437repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:2436 查看slave节点信息1234567891011121314151617[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.16.158 -p 6379 -a 123456 info Replication# Replicationrole:slavemaster_host:100.65.9.250master_port:6379master_link_status:upmaster_last_io_seconds_ago:9master_sync_in_progress:0slave_repl_offset:2605slave_priority:100slave_read_only:1connected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0 测试数据客户端连接master set一条测试数据1234[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.9.250 -p 6379 -a 123456100.65.9.250:6379&gt; set test thisistestOK100.65.9.250:6379&gt; 客户端连接任意slave查看数据1234[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.16.158 -p 6379 -a 123456100.65.16.158:6379&gt; get test&quot;thisistest&quot;100.65.16.158:6379&gt; 测试主从检测关闭一台slave节点，然后检测节点信息12345678910[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.9.250 -p 6379 -a 123456 info Replication# Replicationrole:masterconnected_slaves:1slave0:ip=100.65.16.162,port=6379,state=online,offset=4082,lag=0master_repl_offset:4082repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:4081 发现少了一个slave节点再启动关闭的slave节点，并检测1234567891011[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.9.250 -p 6379 -a 123456 info Replication# Replicationrole:masterconnected_slaves:2slave0:ip=100.65.16.162,port=6379,state=online,offset=4362,lag=0slave1:ip=100.65.16.158,port=6379,state=online,offset=4362,lag=0master_repl_offset:4362repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:4361 发现检测到slave节点又变为了2关闭master，然后检测节点信息123456789101112131415161718[root@redis ~]# /usr/local/redis/bin/redis-cli -h 100.65.16.162 -p 6379 -a 123456 info Replication# Replicationrole:slavemaster_host:100.65.9.250master_port:6379master_link_status:downmaster_last_io_seconds_ago:-1master_sync_in_progress:0slave_repl_offset:4586master_link_down_since_seconds:27slave_priority:100slave_read_only:1connected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0 发现并没有马上选举出新的master，还是就得master，这段时间是不可写的。过一段时间后，重新检测，发现选举出了新的master。]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>sentinel</tag>
        <tag>HA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hwcloud user guid]]></title>
    <url>%2F2017%2F06%2F13%2Fhwcloud-user-guid%2F</url>
    <content type="text"><![CDATA[前言该文章旨在记录在使用华为云的过程中遇到的各种坑以及解决方案。 无公网 IP 的云服务器访问 Internet操作场景华为官方的说法如下：为保证安全和节省公网IP资源，通常只为特定的云服务器配置公网IP，可直接访问 Internet，其他云服务器只配置私网IP，无法直接访问Internet。因此，当只配置了私网 IP的云服务器需要访问Internet，执行软件升级、给系统打补丁或者其它需求时，可选 择一台绑定了公网IP的云服务器作为代理云服务器，为其他无公网IP的云服务器提供访 问通道，正常访问Internet。为了让无公网 IP 的云服务器访问 Internet 需要手动配置网关。 前提条件 已拥有一台绑定了公网IP的云服务器作为代理云服务器。 本节操作中，以代理云服务器的操作系统是CentOS 6.5为例。 代理云服务器和其他需要访问Internet的云服务器需要访问外网的网卡均处于同一网段，并且在同一安 全组内。 我代理服务器的网段为192.168.2.0/24 网关为192.168.2.1 代理服务器内网ip为192.168.2.254 我的无公网 IP 的服务器的主网卡网段为192.168.0.0/24 网关为192.168.0.1。 无公网 IP 服务器的主网卡如果与代理服务器不在一个网段，则可以再添加一个与代理服务器在一个网段的网卡。 配置代理服务器 登录管理控制台将代理服务器的网卡的“源/目的检查”选项 设置为“OFF”。 登录代理服务器，ping 下百度或谷歌测试网络连通性 查看代理云服务器的 IP 转发功能是否开启 1cat /proc/sys/net/ipv4/ip_forward 回显为“0”表示关闭，请执行步骤4。 回显为“1”表示开启，请执行步骤5。 配置 IP 转发编辑 /etc/sysctl.conf ，将 net.ipv4.ip_forward 的值改为 “1”，并执行如下命令使配置文件生效 1sysctl -p /etc/sysctl.conf 清除 IPTABLES 规则 1iptables -F 配置SNAT 1iptables -t nat -A POSTROUTING -o eth0 -s 192.168.2.0/24 -j SNAT --to 192.168.2.254 验证 1iptables -t nat --list 回显类似下图，表示配置成功 保存 IPTABLES 配置1service iptables save 配置无公网 IP 的云服务器这里直接设置静态路由表来实现，重启服务器仍然生效 配置默认网关 1[root@srm-app ~]# echo &quot;GATEWAY=192.168.2.254&quot; &gt;&gt; /etc/sysconfig/network 配置静态路由表 1vi /etc/sysconfig/static-routes 添加如下内容12345any net 169.254.169.254/32 gw 192.168.2.1 eth1any net 169.254.169.254/32 gw 192.168.0.1 eth0any net 192.168.2.0/24 gw 192.168.2.1 eth1any net 192.168.0.0/16 gw 192.168.0.1 eth0any net 100.125.0.0/16 gw 192.168.0.1 eth0 其中 169.254.169.254/32 为华为官方文档特别说明要添加的 192.168.2.0/24 这个网段必须要添加 192.168.0.0/16 添加这个网段是我所有内网服务器的网段，添加这个网段是为了让我内网之间互相访问的时候不走代理服务器 100.125.0.0/16 这个网段是华为云的负载均衡的内网网段，添加这个网段是为了让负载均衡在访问服务器的时候不走代理 重启网络服务1service network restart ping外网来验证]]></content>
      <categories>
        <category>华为云</category>
        <category>ELB</category>
      </categories>
      <tags>
        <tag>华为云</tag>
        <tag>网络</tag>
        <tag>ELB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first blog from atom]]></title>
    <url>%2F2017%2F06%2F09%2Ffirst-blog-from-atom%2F</url>
    <content type="text"><![CDATA[comming soon…]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
